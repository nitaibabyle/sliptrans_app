#include <iostream>
#include <Eigen/Core>
#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <pinocchio/fwd.hpp>
#include "pinocchio/parsers/sample-models.hpp"
#include <pinocchio/parsers/urdf.hpp>
#include <pinocchio/spatial/explog.hpp>
#include "pinocchio/algorithm/joint-configuration.hpp"
#include "pinocchio/algorithm/model.hpp"
#include "pinocchio/algorithm/kinematics.hpp"
#include "pinocchio/algorithm/jacobian.hpp"
#include "pinocchio/algorithm/center-of-mass.hpp"
#include "pinocchio/algorithm/frames.hpp"
#include "pinocchio/spatial/se3.hpp"
#include "pinocchio/multibody/fwd.hpp"
#include "pinocchio/multibody/joint/joint-generic.hpp"
#include "pinocchio/multibody/model.hpp"
#include "pinocchio/multibody/data.hpp"
#include "pinocchio/algorithm/rnea.hxx"

#include "IKQP/hlqIkQPbased.hpp"

#include <cstddef>
#include <cstdlib>

using namespace std;

class robot_para;

class fn_slip_trans
{
public:
    fn_slip_trans();
    ~fn_slip_trans();

    //  hiproll hipyaw hippitch kneepitch anklepitch ankleroll
    Eigen::Matrix<double, 12, 1> jointAngel_output;  // angle 6right 6left
    Eigen::Matrix<double, 12, 1> jointAngelV_output; // angle velocity 6right 6left

    //   length  rollangle  pitchangle
    Eigen::Matrix<double, 6, 1> slipState_output;  // slip state 3right 3left
    Eigen::Matrix<double, 6, 1> slipStateV_output; // slip state velocity 3right 3left

    //  hiproll hipyaw hippitch kneepitch anklepitch ankleroll
    Eigen::Matrix<double, 12, 1> jointAngel_input;  // angle 6right 6left
    Eigen::Matrix<double, 12, 1> jointAngelV_input; // angle velocity 6right 6left

    //   length  rollangle  pitchangle
    Eigen::Matrix<double, 6, 1> slipState_input;  // slip state 3right 3left
    Eigen::Matrix<double, 6, 1> slipStateV_input; // slip state velocity 3right 3left

    //  roll pitch yaw
    Eigen::Matrix<double, 3, 1> torso_input;

    void calculate_slipstate();
    void calculate_jointangle();

private:
    const double Time_step = 0.001; // control period 0.001s

    robot_para in_para;
    robot_para out_para;

    void robot2slip(robot_para &robot_cal, Eigen::Matrix<double, 3, 1> &torso_rot);
    void slip2robot(robot_para &slip_cal, Eigen::Matrix<double, 3, 1> &torso_rot);

    ikQP ikcalculate;
    Eigen::VectorXd joint_angle, joint_vel, joint_angleIK, joint_velIK;

    Eigen::Vector3d Lfoot_pos;
    Eigen::Vector3d Rfoot_pos;
    Eigen::Vector3d torso_pos;
    Eigen::Vector3d com_pos;

    Eigen::Vector3d Lfoot_vel;
    Eigen::Vector3d Rfoot_vel;
    Eigen::Vector3d torso_vel;
    Eigen::Vector3d com_vel;
    Eigen::Vector3d Observe_vel;
    Eigen::Vector3d Observe_vel1;

    int Rfoot_id;
    int Lfoot_id;
    int torso_id;
    int rfoot_joint_id;
    int lfoot_joint_id;

    int Rfoot_id_IK;
    int Lfoot_id_IK;
    int torso_id_IK;
    int rfoot_joint_id_IK;
    int lfoot_joint_id_IK;

    pinocchio::Model model_;
    pinocchio::Model model_IK;

    pinocchio::Data data_;
    pinocchio::Data data_IK;

    Eigen::VectorXd q_;
    Eigen::VectorXd q_IK;
    Eigen::VectorXd q_ikref;

    Eigen::VectorXd qd_;
    Eigen::VectorXd qd_IK;

    pinocchio::Data::Matrix6x J_r;
    pinocchio::Data::Matrix6x J_l;

    std::string urdf_file = "~/xxx/xxx.urdf";
    std::string urdf_file_IK = "~/xxx/xxx.urdf";

    Eigen::Matrix3d RPY2ROT(double rollIn, double pitchIn, double yawIn);

    // Function Declarations Note this function is generated by the matlab, and copied here
    Eigen::Matrix<double, 6, 1> slipVel_2_footVel(
        double &rleglength, double &rlegrollangle,
        double &rlegpitchangle, double &lleglength,
        double &llegrollangle, double &llegpitchangle,
        double &drleglength, double &drlegrollangle,
        double &drlegpitchangle, double &dlleglength,
        double &dllegrollangle, double &dllegpitchangle);
};
